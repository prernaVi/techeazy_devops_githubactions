name: Deploy Spring Boot App on EC2 (Multi-Stage)

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment Stage (dev, prod)"
        required: true
        default: "dev"

env:
  AWS_REGION: ap-south-1
  INSTANCE_TYPE: t2.micro
  KEY_NAME: prerna-key-new
  STAGE: ${{ github.event.inputs.stage }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="stage=${{ env.STAGE }}"

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=techeazy-devops-instance-${{ env.STAGE }}" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          echo "Public IP: $IP"

      - name: Wait for EC2 to be ready
        run: |
          echo "Waiting for EC2 to initialize..."
          sleep 60

      - name: Deploy App on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd app
            git pull
            chmod +x mvnw
            ./mvnw clean package
            sudo pkill -f 'java' || true
            sudo nohup java -jar target/*.jar --server.port=80 > app.log 2>&1 &

      - name: Health Check
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_IP }}/)
            if [ "$STATUS" -eq 200 ]; then
              echo "Health check passed. App is reachable."
              exit 0
            else
              echo "Attempt $i: App not reachable yet, retrying in 10s..."
              sleep 10
            fi
          done
          echo "Health check failed. App not reachable after retries."
          exit 1

      - name: Upload Logs to Stage-Specific S3 Folder
        run: |
          aws s3 cp app/app.log s3://your-bucket/logs/${{ env.STAGE }}/app.log
