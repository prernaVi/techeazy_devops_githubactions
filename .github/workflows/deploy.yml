name: Deploy TechEazy DevOps Project

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Retrieve EC2 Public IP
        id: get_ip
        run: |
          echo "EC2_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      - name: Wait for EC2 SSH to be ready
        run: |
          echo "Waiting for EC2 SSH to become ready..."
          for i in {1..30}; do
            nc -zv ${{ env.EC2_IP }} 22 && echo "SSH is up" && exit 0
            echo "Retrying in 10s..."
            sleep 10
          done
          echo "Timeout waiting for SSH" && exit 1

      - name: Copy Spring Boot Project to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/home/ec2-user/app"
          overwrite: true

      - name: Deploy and Run Spring Boot App on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app
            chmod +x mvnw
            ./mvnw clean package
            sudo pkill -f 'java -jar' || true
            nohup java -jar target/*.jar --server.port=80 &

      - name: Health Check
        run: |
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_IP }}:80/actuator/health || true)
            echo "Health check status: $STATUS"
            if [ "$STATUS" == "200" ]; then
              echo "App is healthy."
              exit 0
            fi
            echo "Retrying health check in 10s..."
            sleep 10
          done
          echo "App failed health check" && exit 1
